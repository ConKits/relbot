<?xml version="1.0" encoding="UTF-8"?>
<testsuite
  name="my_image_processor.uncrustify"
  tests="2"
  failures="2"
  errors="0"
  time="0.026"
>
  <testcase
    name="include/image_processor.hpp"
    classname="my_image_processor.uncrustify"
  >
      <failure message="Diff with 10 lines"><![CDATA[--- include/image_processor.hpp
+++ include/image_processor.hpp.uncrustify
@@ -11 +11 @@
-    ImageProcessor();
+  ImageProcessor();
@@ -14,2 +14,2 @@
-    void image_callback(const sensor_msgs::msg::Image::SharedPtr msg);
-    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr subscription_;
+  void image_callback(const sensor_msgs::msg::Image::SharedPtr msg);
+  rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr subscription_;
]]></failure>
  </testcase>
  <testcase
    name="src/image_processor.cpp"
    classname="my_image_processor.uncrustify"
  >
      <failure message="Diff with 72 lines"><![CDATA[--- src/image_processor.cpp
+++ src/image_processor.cpp.uncrustify
@@ -3,2 +3,4 @@
-ImageProcessor::ImageProcessor() : Node("image_processor") {
-    subscription_ = this->create_subscription<sensor_msgs::msg::Image>(
+ImageProcessor::ImageProcessor()
+: Node("image_processor")
+{
+  subscription_ = this->create_subscription<sensor_msgs::msg::Image>(
@@ -7 +9 @@
-    RCLCPP_INFO(this->get_logger(), "ImageProcessor node started. Waiting for images...");
+  RCLCPP_INFO(this->get_logger(), "ImageProcessor node started. Waiting for images...");
@@ -27,2 +29,3 @@
-void ImageProcessor::image_callback(const sensor_msgs::msg::Image::SharedPtr msg) {
-    try {
+void ImageProcessor::image_callback(const sensor_msgs::msg::Image::SharedPtr msg)
+{
+  try {
@@ -30 +33 @@
-         cv::Mat cv_image = cv_bridge::toCvCopy(msg, "bgr8")->image;
+    cv::Mat cv_image = cv_bridge::toCvCopy(msg, "bgr8")->image;
@@ -33,3 +36,3 @@
-         std::vector<cv::Mat> channels(3);
-         cv::split(cv_image, channels);  // Split into B, G, R
- 
+    std::vector<cv::Mat> channels(3);
+    cv::split(cv_image, channels);       // Split into B, G, R
+
@@ -37,3 +40,3 @@
-         cv::Mat blue_image, green_image, red_image;
-         cv::Mat zero_channel = cv::Mat::zeros(cv_image.size(), CV_8UC1);
- 
+    cv::Mat blue_image, green_image, red_image;
+    cv::Mat zero_channel = cv::Mat::zeros(cv_image.size(), CV_8UC1);
+
@@ -41,4 +44,4 @@
-         cv::merge(std::vector<cv::Mat>{channels[0], zero_channel, zero_channel}, blue_image);  // Blue image
-         cv::merge(std::vector<cv::Mat>{zero_channel, channels[1], zero_channel}, green_image); // Green image
-         cv::merge(std::vector<cv::Mat>{zero_channel, zero_channel, channels[2]}, red_image);   // Red image
- 
+    cv::merge(std::vector<cv::Mat>{channels[0], zero_channel, zero_channel}, blue_image);       // Blue image
+    cv::merge(std::vector<cv::Mat>{zero_channel, channels[1], zero_channel}, green_image);      // Green image
+    cv::merge(std::vector<cv::Mat>{zero_channel, zero_channel, channels[2]}, red_image);        // Red image
+
@@ -46,7 +49,7 @@
-      cv::imshow("Blue Channel", blue_image);
-      cv::imshow("Green Channel", green_image);
-      cv::imshow("Red Channel", red_image);
-      cv::waitKey(1);
-    } catch (const std::exception &e) {
-        RCLCPP_ERROR(this->get_logger(), "Image processing failed: %s", e.what());
-    }
+    cv::imshow("Blue Channel", blue_image);
+    cv::imshow("Green Channel", green_image);
+    cv::imshow("Red Channel", red_image);
+    cv::waitKey(1);
+  } catch (const std::exception & e) {
+    RCLCPP_ERROR(this->get_logger(), "Image processing failed: %s", e.what());
+  }
@@ -56,6 +59,6 @@
-
-int main(int argc, char **argv) {
-    rclcpp::init(argc, argv);
-    rclcpp::spin(std::make_shared<ImageProcessor>());
-    rclcpp::shutdown();
-    return 0;
+int main(int argc, char **argv)
+{
+  rclcpp::init(argc, argv);
+  rclcpp::spin(std::make_shared<ImageProcessor>());
+  rclcpp::shutdown();
+  return 0;
]]></failure>
  </testcase>
  <system-out>Checked files:
* include/image_processor.hpp
* src/image_processor.cpp</system-out>
</testsuite>
